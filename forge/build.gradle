plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

archivesBaseName = rootProject.archives_base_name + "-forge-" + project.minecraft_version

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "fancydyes-common.mixins.json"
        mixinConfig "fancydyes.mixins.json"
        mixinConfig "fancydyes.mixins.oculus.json"

        dataGen {
            mod "fancydyes"
        }
    }

}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modImplementation "maven.modrinth:oculus:1.19.2-1.2.8a"
    modImplementation "maven.modrinth:rubidium:0.6.2"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand(project.properties)
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

//modrinth {
//    token = System.getenv("MODRINTH_TOKEN") // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
//    projectId = "fancy-dyes" // This can be the project ID or the slug. Either will work!
//    versionNumber = "%s+%s+forge".formatted(property("mod_version"), property("minecraft_version")) // You don't need to set this manually. Will fail if Modrinth has this version already
//    versionType = "release" // This is the default -- can also be `beta` or `alpha`
//    versionName = "[Forge %s] %s".formatted(property("minecraft_version"), property("mod_version"))
//    changelog = rootProject.file("CHANGELOG.md").text
//    uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
//    gameVersions = [property("minecraft_version")] // Must be an array, even with only one version
//    loaders = ["forge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
//    dependencies { // A special DSL for creating dependencies
//        // scope.type
//        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
//        // The type can either be `project` or `version`
//        required.project "architectury-api"
//        // Creates a new required dependency on Fabric API
//    }
//    debugMode = true
//}

unifiedPublishing {
    project {
        displayName = "[Forge %s] %s".formatted(property("minecraft_version"), property("mod_version"))
        version = "%s+%s+forge".formatted(property("mod_version"), property("minecraft_version"))
        changelog = rootProject.file("CHANGELOG.md").text
        releaseType = "release"
        gameVersions = [property("minecraft_version")]
        gameLoaders = ["forge"]

        mainPublication tasks.remapJar

        relations {
            depends {
                curseforge = "architectury-api"
                modrinth = "architectury-api"
            }
        }

        curseforge {
            token = System.getenv("CURSEFORGE_TOKEN")
            id = "715108" // Required, must be a string, ID of CurseForge project
        }

        modrinth {
            token = System.getenv("MODRINTH_TOKEN")
            id = "weDXQCzq" // Required, must be a string, ID of Modrinth project
        }
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name + "-forge"
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}