plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

archivesBaseName = rootProject.archives_base_name + "-fabric-"+ project.minecraft_version

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    runs {
        datagenClient {
            inherit client
            name "Minecraft Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${"fancydyes"}"
            runDir "build/datagen"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modRuntimeOnly "curse.maven:alloygery-573592:4406841"
    modRuntimeOnly "maven.modrinth:armor-render-lib:0.1.3"


    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version
    inputs.property "description", "Test";

    filesMatching("fabric.mod.json") {
        expand(project.properties)
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

unifiedPublishing {
    project {
        displayName = "[Fabric %s] %s".formatted(property("minecraft_version"), property("mod_version"))
        version = "%s+%s+fabric".formatted(property("mod_version"), property("minecraft_version"))
        changelog = rootProject.file("CHANGELOG.md").text
        releaseType = "release"
        gameVersions = [property("minecraft_version")]
        gameLoaders = ["fabric"]

        mainPublication tasks.remapJar

        relations {
            depends {
                curseforge = "architectury-api"
                modrinth = "architectury-api"
            }
        }

        curseforge {
            token = System.getenv("CURSEFORGE_TOKEN")
            id = "715108" // Required, must be a string, ID of CurseForge project
        }

        modrinth {
            token = System.getenv("MODRINTH_TOKEN")
            id = "weDXQCzq" // Required, must be a string, ID of Modrinth project
        }
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
